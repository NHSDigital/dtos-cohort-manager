name: Test stage

on:
  workflow_call:
    inputs:
      unit_test_dir:
        description: Directory containing the unit tests
        required: true
        type: string
      unit_test_logger_format:
        description: Test report format
        required: false
        default: trx
        type: string
      build_datetime:
        description: Build datetime, set by the CI/CD pipeline workflow
        required: true
        type: string
      build_timestamp:
        description: Build timestamp, set by the CI/CD pipeline workflow
        required: true
        type: string
      build_epoch:
        description: Build epoch, set by the CI/CD pipeline workflow
        required: true
        type: string
      nodejs_version:
        description: Node.js version, set by the CI/CD pipeline workflow
        required: true
        type: string
      python_version:
        description: Python version, set by the CI/CD pipeline workflow
        required: true
        type: string
      terraform_version:
        description: Terraform version, set by the CI/CD pipeline workflow
        required: true
        type: string
      version:
        description: Version of the software, set by the CI/CD pipeline workflow
        required: true
        type: string

jobs:
  unit-test-scope:
    name: Get unit test scopes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      test-matrix: ${{ steps.matrix.outputs.test-matrix }}
    env:
      UNIT_TEST_DIR: ${{ inputs.unit_test_dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Create matrix for parallel jobs
        id: matrix
        run: |
          set -eo pipefail
          mapfile -t test_matrix < <(find "${UNIT_TEST_DIR}" -mindepth 1 -maxdepth 1 -type d | sed 's|.*/||')
          test_matrix_json=$(jq -c -n '$ARGS.positional' --args "${test_matrix[@]}")
          echo "Unit test scopes: ${test_matrix_json}"
          echo "test-matrix=${test_matrix_json}" >> "${GITHUB_OUTPUT}"

  test-unit:
    name: Unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-test-scope]
    strategy:
      matrix:
        scope: ${{ fromJSON(needs.unit-test-scope.outputs.test-matrix) }}
    if: needs.unit-test-scope.outputs.test-matrix != '[]'
    env:
      UNIT_TEST_DIR: ${{ inputs.unit_test_dir }}
      LOGGER_FORMAT: ${{ inputs.unit_test_logger_format }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Run unit test suite
        continue-on-error: true
        run: |
          set -eo pipefail
          mkdir "TestResults"
          find "${UNIT_TEST_DIR}/${{ matrix.scope }}" -name '*.csproj' | while read -r file; do
            echo -e "\nRunning unit tests for:\n${file}"
            dotnet test "${file}" --logger ${LOGGER_FORMAT} --results-directory "TestResults" --verbosity quiet \
              --collect:"XPlat Code Coverage;Format=cobertura,opencover"
          done
      - name: Upload test results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.scope }}
          path: |
            TestResults/**/*.${{ inputs.unit_test_logger_format }}
            TestResults/**/coverage.cobertura.xml
            TestResults/**/coverage.opencover.xml

  aggregate-test-results:
    name: Aggregate results and report
    runs-on: ubuntu-latest
    needs: [test-unit, test-coverage]
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Download all test result artifacts
        uses: actions/download-artifact@v4
        with:
          path: aggregated-results
      - name: Merge coverage reports
        run: |
          # Install the ReportGenerator global tool
          dotnet tool install -g dotnet-reportgenerator-globaltool
          # Ensure the tool is in the PATH
          export PATH="$PATH:~/.dotnet/tools"
          # Merge all coverage.cobertura.xml files into one merged report using ReportGenerator
          reportgenerator -reports:"aggregated-results/**/coverage.cobertura.xml" -targetdir:"aggregated-results/merged" -reporttypes:Cobertura
          # Rename/move the merged report to a clear name for further steps
          mv aggregated-results/merged/Cobertura.xml aggregated-results/combined-coverage.cobertura.xml
      - name: Upload aggregated results as a single artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results-aggregated
          path: |
            aggregated-results/**/*.${{ inputs.unit_test_logger_format }}
            aggregated-results/combined-coverage.cobertura.xml
            aggregated-results/**/coverage.opencover.xml
      - name: Report results
        uses: bibipkins/dotnet-test-reporter@v1.5.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-title: Unit Test Results
          results-path: aggregated-results/**/*.${{ inputs.unit_test_logger_format }}
          coverage-path: aggregated-results/combined-coverage.cobertura.xml
          coverage-type: cobertura
          coverage-threshold: 50
          post-new-comment: true

  test-lint:
    name: Linting
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linting
        run: |
          make test-lint
      - name: Save the linting result
        run: |
          echo "Nothing to save"

  test-coverage:
    name: Test coverage
    needs: [test-unit]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run test coverage check
        run: |
          make test-coverage
      - name: Save the coverage check result
        run: |
          echo "Nothing to save"

  perform-static-analysis:
    name: Perform static analysis
    needs: [test-unit, aggregate-test-results]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history is needed to improving relevancy of reporting
      - name: Download aggregated test results artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results-aggregated
          path: aggregated-results
      - name: Perform static analysis
        uses: ./.github/actions/perform-static-analysis
        with:
          sonar_organisation_key: ${{ vars.SONAR_ORGANISATION_KEY }}
          sonar_project_key: ${{ vars.SONAR_PROJECT_KEY }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
