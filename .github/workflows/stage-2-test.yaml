name: "Test stage"

on:
  workflow_call:
    inputs:
      build_datetime:
        description: "Build datetime, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_timestamp:
        description: "Build timestamp, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_epoch:
        description: "Build epoch, set by the CI/CD pipeline workflow"
        required: true
        type: string
      nodejs_version:
        description: "Node.js version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      python_version:
        description: "Python version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      terraform_version:
        description: "Terraform version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      version:
        description: "Version of the software, set by the CI/CD pipeline workflow"
        required: true
        type: string

jobs:
  test-unit:
    name: "Unit tests"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: "Run unit test suite"
        run: |
          make test-unit
      - name: "Unit Tests Results"
        uses: bibipkins/dotnet-test-reporter@v1.4.0
        with:
          comment-title: 'Unit Test Results'
          results-path: ./tests/UnitTests/results-unit/*.trx

  test-lint:
    name: "Linting"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Run linting"
        run: |
          make test-lint
      - name: "Save the linting result"
        run: |
          echo "Nothing to save"

  test-coverage:
    name: "Test coverage"
    needs: [test-unit]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      coverage_xml_path: ${{ steps.upload.outputs.artifact_path }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: "Generate coverage report"
        id: run_coverage
        run: |
          # Run your test coverage command.
          # This script should generate the file at the given path.
          COVERAGE_PATH=$(make test-coverage)
          echo "Generated coverage report at: ${COVERAGE_PATH}"
          # Export the coverage path as an output variable for later reference if needed
          echo "::set-output name=coverage_xml_path::${COVERAGE_PATH}"
      - name: "Upload coverage report"
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ steps.run_coverage.outputs.coverage_xml_path }}

  perform-static-analysis:
    name: "Perform static analysis"
    needs: [test-unit, test-coverage]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history is needed to improve relevancy of reporting
      - name: "Download coverage report"
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./coverage
      - name: "Perform static analysis"
        uses: ./.github/actions/perform-static-analysis
        with:
          sonar_organisation_key: "${{ vars.SONAR_ORGANISATION_KEY }}"
          sonar_project_key: "${{ vars.SONAR_PROJECT_KEY }}"
          sonar_token: "${{ secrets.SONAR_TOKEN }}"
          coverage_report_path_opencover: "./coverage/$(basename ${{ needs.test-coverage.outputs.coverage_xml_path }})"
