name: Analysis stage

on:
  workflow_call:
    inputs:
      unit_test_dir:
        description: Directory containing the unit tests
        required: true
        type: string
      build_datetime:
        description: Build datetime, set by the CI/CD pipeline workflow
        required: true
        type: string
      build_timestamp:
        description: Build timestamp, set by the CI/CD pipeline workflow
        required: true
        type: string
      build_epoch:
        description: Build epoch, set by the CI/CD pipeline workflow
        required: true
        type: string
      nodejs_version:
        description: Node.js version, set by the CI/CD pipeline workflow
        required: true
        type: string
      python_version:
        description: Python version, set by the CI/CD pipeline workflow
        required: true
        type: string
      terraform_version:
        description: Terraform version, set by the CI/CD pipeline workflow
        required: true
        type: string
      version:
        description: Version of the software, set by the CI/CD pipeline workflow
        required: true
        type: string

jobs:
  download-test-coverage:
    name: Download test coverage
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: test-coverage-report
          path: coverage
          
  perform-static-analysis:
    name: Perform static analysis
    needs: [download-test-coverage]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 15  # Increased timeout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0 # Full history is needed to improving relevancy of reporting
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - name: Install .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            7.0.x
            8.0.x
            9.0.x
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: test-coverage-report
          path: coverage
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-sonar-
      - name: Install SonarQube Cloud scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
      - name: Setup NuGet cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Restore NuGet packages
        run: |
          find . -name "*.sln" -exec dotnet restore {} \;
      - name: Begin SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Starting SonarCloud analysis with:"
          echo "Project key: ${{ vars.SONAR_PROJECT_KEY }}"
          echo "Organization key: ${{ vars.SONAR_ORGANISATION_KEY }}"
          
          # List coverage files to verify they exist
          echo "Available coverage files:"
          ls -la coverage/
          
          # Begin SonarScanner with improved coverage configuration
          dotnet sonarscanner begin \
            /k:"${{ vars.SONAR_PROJECT_KEY }}" \
            /o:"${{ vars.SONAR_ORGANISATION_KEY }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.dotnet.projectPattern=".*\.csproj$" \
            /d:sonar.cs.opencover.reportsPaths="coverage/*.xml" \
            /d:sonar.cs.cobertura.reportsPaths="coverage/cobertura.xml" \
            /d:sonar.coverage.exclusions="**/*Tests.cs,**/Tests/**/*.cs" \
            /d:sonar.verbose=true
      - name: Build solution
        run: |
          find . -name "*.sln" -exec dotnet build {} --no-restore \;
      - name: End SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"