name: Docker Image CI

on:
  push:
    branches:
      - main
      - fix/DTOSS-0000-verify-gh-runner-diskspace

  workflow_call:
    inputs:
      environment_tag:
        description: "Environment of the deployement"
        required: true
        type: string

jobs:
  get-changed-files:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: tj-actions/changed-files@v44
        id: changed-files
        with:
          path: application/CohortManager/src/Functions
          dir_names: "true"

      - name: Get docker compose function name(s)
        id: get-function-names
        env:
          CHANGED_FOLDERS: ${{steps.changed-files.outputs.all_changed_files}}
        run: |
          bash ./scripts/deployment/get-docker-names.sh

      - name: Print function names
        run: |
          echo "${{steps.get-function-names.outputs.FUNC_NAMES}}"
          echo "The branch is: " ${{ github.ref }}

      - name: Az CLI login
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fix/DTOSS-0000-verify-gh-runner-diskspace'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure Container Registry login
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fix/DTOSS-0000-verify-gh-runner-diskspace'
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Create tags
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true
        run: |
          set -x
          echo "GITHUB_REF: $GITHUB_REF"
          echo "The branch is: ${{ github.ref }}"

          if [[ "$GITHUB_REF" == refs/pull/*/merge ]]; then
            PR_NUM_TAG=$(echo "$GITHUB_REF" | sed 's/refs\/pull\/\([0-9]*\)\/merge/\1/')
          else
            PULLS_JSON=$(gh api /repos/{owner}/{repo}/commits/${GITHUB_SHA}/pulls)
            ORIGINATING_BRANCH=$(echo ${PULLS_JSON} | jq -r '.[].head.ref' | python3 -c "import sys, urllib.parse; print(urllib.parse.quote_plus(sys.stdin.read().strip()))")
            echo "ORIGINATING_BRANCH: $ORIGINATING_BRANCH"
            PR_NUM_TAG=$(echo ${PULLS_JSON} | jq -r '.[].number')
          fi

          echo "PR_NUM_TAG: pr$PR_NUM_TAG"
          echo "PR_NUM_TAG=pr$PR_NUM_TAG" >> $GITHUB_ENV

          SHORT_COMMIT_HASH=$(git rev-parse --short $GITHUB_SHA)
          echo "Commit hash tag: $SHORT_COMMIT_HASH"
          echo "COMMIT_HASH_TAG=$SHORT_COMMIT_HASH" >> $GITHUB_ENV

          echo "ENVIRONMENT_TAG=development" >> $GITHUB_ENV


      - name: Build, tag anb push docker images
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fix/DTOSS-0000-verify-gh-runner-diskspace'
        working-directory: ./application/CohortManager
        run: |
          set -x

          if [ -z "${{steps.get-function-names.outputs.FUNC_NAMES}}" ] || [ "${{steps.get-function-names.outputs.FUNC_NAMES}}" == "null" ]; then
            echo "No functions changed"
          else
            echo "These functions will be rebuilt: " ${{steps.get-function-names.outputs.FUNC_NAMES}}
            echo "COMMIT_HASH_TAG:$COMMIT_HASH_TAG"
            echo "PR_NUM_TAG:$PR_NUM_TAG"
            echo "ENVIRONMENT_TAG:$ENVIRONMENT_TAG"

            for function in ${{steps.get-function-names.outputs.FUNC_NAMES}}; do
              # Build the image
              docker compose build $function

              echo "Current function being built is:"
              echo $function
              echo "How much disk space is left before docker image creation:"
              df -H

              repo_name="${{ secrets.ACR_NAME }}.azurecr.io/cohort-manager-$function"

              # Tag the image
              docker tag cohort-manager-$function:latest "$repo_name:$COMMIT_HASH_TAG"
              docker tag cohort-manager-$function:latest "$repo_name:$PR_NUM_TAG"
              docker tag cohort-manager-$function:latest "$repo_name:$ENVIRONMENT_TAG"

              # Push the image to the repository
              docker push "$repo_name:$COMMIT_HASH_TAG"
              if [ "$PR_NUM_TAG" != 'pr' ]; then
                docker push "$repo_name:$PR_NUM_TAG"
              fi
              docker push "$repo_name:$ENVIRONMENT_TAG"

              # Remove the image
              docker rmi "$repo_name:$COMMIT_HASH_TAG"
              docker rmi "$repo_name:$PR_NUM_TAG"
              docker rmi "$repo_name:$ENVIRONMENT_TAG"
              docker rmi cohort-manager-$function:latest

              echo "How much disk space is left after docker image creation:"
              df -H
            done
          fi
