name: "Perform static analysis"
description: "Perform static analysis"
inputs:
  sonar_organisation_key:
    description: "Sonar organisation key, used to identify the project"
    required: true
  sonar_project_key:
    description: "Sonar project key, used to identify the project"
    required: true
  sonar_token:
    description: "Sonar token, the API key"
    required: true
runs:
  using: "composite"
  steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: "zulu"
        
    - name: Install .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x  # Adjust this version to match your project requirements
        
    - name: Cache SonarQube Cloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache SonarQube Cloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
        
    - name: Install SonarQube Cloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p .sonar/scanner
        dotnet tool install dotnet-sonarscanner --tool-path ./.sonar/scanner
        
    - name: Build and analyze
      shell: bash
      run: |
        echo "Starting SonarCloud analysis with:"
        echo "Project key: ${{ inputs.sonar_project_key }}"
        echo "Organization key: ${{ inputs.sonar_organisation_key }}"
        
        # Begin SonarScanner
        ./.sonar/scanner/dotnet-sonarscanner begin \
          /k:"${{ inputs.sonar_project_key }}" \
          /o:"${{ inputs.sonar_organisation_key }}" \
          /d:sonar.token="${{ inputs.sonar_token }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.vscoveragexml.reportsPaths="coverage/vscoverage.xml" \
          /d:sonar.cs.opencover.reportsPaths="coverage/cobertura.xml"
        
        # Build the solution without running tests
        find . -name "*.sln" | xargs -I {} dotnet build {} --no-restore
        
        # End SonarScanner
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ inputs.sonar_token }}"