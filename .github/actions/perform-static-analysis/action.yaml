name: "Perform static analysis"
description: "Perform static analysis"
inputs:
  sonar_organisation_key:
    description: "Sonar organisation key, used to identify the project"
    required: true
  sonar_project_key:
    description: "Sonar project key, used to identify the project"
    required: true
  sonar_token:
    description: "Sonar token, the API key"
    required: true
runs:
  using: "composite"
  steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: "zulu"
        
    - name: Install .NET SDKs
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          7.0.x
          8.0.x
          9.0.x
          
    - name: Cache SonarQube Cloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache SonarQube Cloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
        
    - name: Install SonarQube Cloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p .sonar/scanner
        dotnet tool install dotnet-sonarscanner --tool-path ./.sonar/scanner
        
    - name: Fix NuGet Caching
      shell: bash
      run: |
        dotnet nuget locals all --clear
        mkdir -p ~/.nuget/NuGet
        echo '<?xml version="1.0" encoding="utf-8"?><configuration><packageSources><add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" /></packageSources></configuration>' > ~/.nuget/NuGet/NuGet.Config
        
    - name: Build and analyze
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        echo "Starting SonarCloud analysis with:"
        echo "Project key: ${{ vars.SONAR_PROJECT_KEY }}"
        echo "Organization key: ${{ vars.SONAR_ORGANISATION_KEY }}"
        
        # Begin SonarScanner
        ./.sonar/scanner/dotnet-sonarscanner begin \
          /k:"${{ vars.SONAR_PROJECT_KEY }}" \
          /o:"${{ vars.SONAR_ORGANISATION_KEY }}" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.vscoveragexml.reportsPaths="coverage/vscoverage.xml" \
          /d:sonar.cs.opencover.reportsPaths="coverage/cobertura.xml" \
          /d:sonar.scanner.skipJreProvisioning=true
        
        # Restore all dependencies first
        echo "Restoring dependencies for all projects"
        dotnet restore --verbosity detailed 
        
        # Restore all csproj files individually
        echo "Individual project restore for all csproj files"
        find . -name "*.csproj" | xargs -n 1 -P 4 dotnet restore
        
        # Restore mesh client specifically
        echo "Restoring mesh client projects explicitly"
        dotnet restore application/CohortManager/src/Functions/Shared/dotnet-mesh-client/application/DotNetMeshClient/NHS.Mesh.Client/NHS.Mesh.Client.csproj --verbosity detailed
        
        # Try building each project individually to avoid dependency issues
        echo "Building projects individually"
        find . -name "*.csproj" | grep -v "Test" | xargs -n 1 dotnet build --no-restore --configuration Release
        
        # End SonarScanner - do this even if builds fail
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}" || true