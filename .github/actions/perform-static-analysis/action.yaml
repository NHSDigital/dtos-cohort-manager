name: "Perform static analysis"
description: "Perform static analysis"
inputs:
  sonar_organisation_key:
    description: "Sonar organisation key, used to identify the project"
    required: true
  sonar_project_key:
    description: "Sonar project key, used to identify the project"
    required: true
  sonar_token:
    description: "Sonar token, the API key"
    required: true
runs:
  using: "composite"
  steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: "zulu"
        
    - name: Install .NET SDKs
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          7.0.x
          8.0.x
          9.0.x
        
    - name: Cache SonarQube Cloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache SonarQube Cloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
        
    - name: Install SonarQube Cloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p .sonar/scanner
        dotnet tool install dotnet-sonarscanner --tool-path ./.sonar/scanner
        
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: bash
      run: |
        echo "Starting SonarCloud analysis with:"
        echo "Project key: ${{ vars.SONAR_PROJECT_KEY }}"
        echo "Organization key: ${{ vars.SONAR_ORGANISATION_KEY }}"
        
        # Begin SonarScanner
        ./.sonar/scanner/dotnet-sonarscanner begin \
        /k:"${{ vars.SONAR_PROJECT_KEY }}" \
        /o:"${{ vars.SONAR_ORGANISATION_KEY }}" \
        /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
        /d:sonar.host.url="https://sonarcloud.io" \
        /d:sonar.cs.vscoveragexml.reportsPaths="coverage/vscoverage.xml" \
        /d:sonar.cs.opencover.reportsPaths="coverage/cobertura.xml"
        
        # Restore NuGet packages with explicit targeting of each project
        echo "Restoring NuGet packages for all projects..."
        dotnet restore application/CohortManager/src/Functions/Functions.sln --verbosity detailed
        
        # For subdirectories with many projects, try a more targeted approach
        echo "Looking for projects with missing assets..."
        find application/CohortManager/src/Functions -name "*.csproj" | xargs -I{} dotnet restore "{}" --verbosity minimal
        find tests -name "*.csproj" | xargs -I{} dotnet restore "{}" --verbosity minimal
        
        # Then build the solution with no restore
        echo "Building solutions..."
        find . -name "*.sln" | xargs -I {} dotnet build {} --no-restore
        
        # End SonarScanner
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"