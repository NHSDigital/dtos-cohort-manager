// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace dtos_cohort_manager_specflow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("File Upload and Cohort Distribution")]
    public partial class FileUploadAndCohortDistributionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "FileUploadAndCohortDistribution.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "File Upload and Cohort Distribution", "DTOSS SMOKE TEST PACK.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
    #line hidden
#line 6
        testRunner.Given("the database is cleaned of all records for NHS Numbers: 1111110662, 2222211794,23" +
                    "12514176,2612314172,2612514171", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
        testRunner.And("the application is properly configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Verify file upload and cohort distribution process")]
        [NUnit.Framework.CategoryAttribute("DTOSS-6256")]
        [NUnit.Framework.TestCaseAttribute("ADD_2_RECORDS_-_CAAS_BREAST_SCREENING_COHORT.parquet", "Add", "1111110662, 2222211794", null)]
        public void _01_VerifyFileUploadAndCohortDistributionProcess(string fileName, string recordType, string nhsNumbers, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DTOSS-6256"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FileName", fileName);
            argumentsOfScenario.Add("RecordType", recordType);
            argumentsOfScenario.Add("NhsNumbers", nhsNumbers);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Verify file upload and cohort distribution process", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 11
 testRunner.Given(string.Format("file {0} exists in the configured location for \"Add\" with NHS numbers : {1}", fileName, nhsNumbers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.When("the file is uploaded to the Blob Storage container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("the NHS numbers in the database should match the file data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
    testRunner.When("the file is uploaded to the Blob Storage container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
    testRunner.Then("the NHS numbers in the database should match the file data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Verify file upload and cohort distribution process for amended records")]
        [NUnit.Framework.CategoryAttribute("DTOSS-6257")]
        [NUnit.Framework.TestCaseAttribute("ADD1_1B8F53_-_CAAS_BREAST_SCREENING_COHORT.parquet", "AMENDED1_1B8F53_-_CAAS_BREAST_SCREENING_COHORT.parquet", "2312514176", "AMENDEDNewTest1", null)]
        public void _02_VerifyFileUploadAndCohortDistributionProcessForAmendedRecords(string addFileName, string amendedFileName, string nhsNumbers, string amendedGivenName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DTOSS-6257"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AddFileName", addFileName);
            argumentsOfScenario.Add("AmendedFileName", amendedFileName);
            argumentsOfScenario.Add("NhsNumbers", nhsNumbers);
            argumentsOfScenario.Add("AmendedGivenName", amendedGivenName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Verify file upload and cohort distribution process for amended records", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 24
    testRunner.Given(string.Format("file {0} exists in the configured location for \"Add\" with NHS numbers : {1}", addFileName, nhsNumbers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
    testRunner.And("the file is uploaded to the Blob Storage container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.And("the NHS numbers in the database should match the file data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.And(string.Format("file {0} exists in the configured location for \"Amended\" with NHS numbers : {1}", amendedFileName, nhsNumbers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.When("the file is uploaded to the Blob Storage container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("there should be 2 records for the NHS Number in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.And(string.Format("the database should match the amended {0} for the NHS Number", amendedGivenName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03.Verify file upload handles invalid GP Practice Code Exception")]
        [NUnit.Framework.CategoryAttribute("DTOSS-6406")]
        [NUnit.Framework.TestCaseAttribute("Exception_1B8F53_-_CAAS_BREAST_SCREENING_COHORT.parquet", "2612314172", "36", "Invalid primary care provider GP practice code", null)]
        public void _03_VerifyFileUploadHandlesInvalidGPPracticeCodeException(string addFileName, string nhsNumbers, string rULE_ID, string ruleDescription, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DTOSS-6406"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AddFileName", addFileName);
            argumentsOfScenario.Add("NhsNumbers", nhsNumbers);
            argumentsOfScenario.Add("RULE_ID", rULE_ID);
            argumentsOfScenario.Add("RuleDescription", ruleDescription);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03.Verify file upload handles invalid GP Practice Code Exception", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 38
    testRunner.Given(string.Format("file {0} exists in the configured location for \"Add\" with NHS numbers : {1}", addFileName, nhsNumbers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
    testRunner.When("the file is uploaded to the Blob Storage container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldName",
                            "FieldValue"});
                table1.AddRow(new string[] {
                            "RULE_ID",
                            "36"});
                table1.AddRow(new string[] {
                            "RULE_DESCRIPTION",
                            "Invalid primary care provider GP practice code"});
#line 40
 testRunner.Then("the Exception table should contain the below details for the NHS Number", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04.Verify file upload handles EmptyDOB Exception")]
        [NUnit.Framework.CategoryAttribute("DTOSS-6407")]
        [NUnit.Framework.TestCaseAttribute("ADD_1B8F53_-_CAAS_BREAST_SCREENING_COHORT.parquet", "AMENDED_1B8F53_-_CAAS_BREAST_SCREENING_COHORT.parquet", "2612514171", "36", "Invalid primary care provider GP practice code", null)]
        public void _04_VerifyFileUploadHandlesEmptyDOBException(string addFileName, string amendedFileName, string nhsNumbers, string rULE_ID, string ruleDescription, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DTOSS-6407"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AddFileName", addFileName);
            argumentsOfScenario.Add("AmendedFileName", amendedFileName);
            argumentsOfScenario.Add("NhsNumbers", nhsNumbers);
            argumentsOfScenario.Add("RULE_ID", rULE_ID);
            argumentsOfScenario.Add("RuleDescription", ruleDescription);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04.Verify file upload handles EmptyDOB Exception", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    this.FeatureBackground();
#line hidden
#line 52
    testRunner.Given(string.Format("file {0} exists in the configured location for \"Add\" with NHS numbers : {1}", addFileName, nhsNumbers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
    testRunner.And("the file is uploaded to the Blob Storage container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
    testRunner.And("the NHS numbers in the database should match the file data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
    testRunner.And(string.Format("file {0} exists in the configured location for \"Amended\" with NHS numbers : {1}", amendedFileName, nhsNumbers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
    testRunner.When("the file is uploaded to the Blob Storage container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldName",
                            "FieldValue"});
                table2.AddRow(new string[] {
                            "RULE_ID",
                            "17"});
                table2.AddRow(new string[] {
                            "RULE_DESCRIPTION",
                            "Date of birth invalid"});
#line 57
    testRunner.Then("the Exception table should contain the below details for the NHS Number", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
