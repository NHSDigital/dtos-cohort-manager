[
  {
    "WorkflowName": "TransformData",
    "GlobalParams": [
      {
        "Name": "participantNotRegisteredToGP",
        "Expression": "new string[] {\"RDR\",\"RDI\",\"RPR\"}.Contains(participant.ReasonForRemoval)"
      },
      {
        "Name": "dummyPrimaryCareProvider",
        "Expression": "!string.IsNullOrEmpty(participant.PrimaryCareProvider) AND participant.PrimaryCareProvider.StartsWith(\"ZZZ\")"
      },
      {
        "Name": "validPostcode",
        "Expression": "!string.IsNullOrEmpty(participant.Postcode) AND dbLookup.ValidateOutcode(participant.Postcode)"
      }
    ],
    "Rules": [
      {
        "RuleName": "1.Truncate.NamePrefix.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.NamePrefix) OR !(participant.NamePrefix.Length > 35)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "NamePrefix",
                  "value": "string.IsNullOrEmpty(participant.NamePrefix) ? null : participant.NamePrefix.Substring(0, 35)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "2.Truncate.FirstName.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.FirstName) OR !(participant.FirstName.Length > 35)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "FirstName",
                  "value": "string.IsNullOrEmpty(participant.FirstName) ? null : participant.FirstName.Substring(0, 35)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "3.Truncate.OtherGivenNames.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.OtherGivenNames) OR !(participant.OtherGivenNames.Length > 100)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "OtherGivenNames",
                  "value": "string.IsNullOrEmpty(participant.OtherGivenNames) ? null : participant.OtherGivenNames.Substring(0, 100)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "4.Truncate.FamilyName.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.FamilyName) OR !(participant.FamilyName.Length > 35)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "FamilyName",
                  "value": "string.IsNullOrEmpty(participant.FamilyName) ? null : participant.FamilyName.Substring(0, 35)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "5.Truncate.PreviousFamilyName.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.PreviousFamilyName) OR !(participant.PreviousFamilyName.Length > 35)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "PreviousFamilyName",
                  "value": "string.IsNullOrEmpty(participant.PreviousFamilyName) ? null : participant.PreviousFamilyName.Substring(0, 35)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "6.Truncate.AddressLine1.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.AddressLine1) OR !(participant.AddressLine1.Length > 35)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "AddressLine1",
                  "value": "string.IsNullOrEmpty(participant.AddressLine1) ? null : participant.AddressLine1.Substring(0, 35)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "7.Truncate.AddressLine2.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.AddressLine2) OR !(participant.AddressLine2.Length > 35)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "AddressLine2",
                  "value": "string.IsNullOrEmpty(participant.AddressLine2) ? null : participant.AddressLine2.Substring(0, 35)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "8.Truncate.AddressLine3.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.AddressLine3) OR !(participant.AddressLine3.Length > 35)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "AddressLine3",
                  "value": "string.IsNullOrEmpty(participant.AddressLine3) ? null : participant.AddressLine3.Substring(0, 35)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "9.Truncate.AddressLine4.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.AddressLine4) OR !(participant.AddressLine4.Length > 35)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "AddressLine4",
                  "value": "string.IsNullOrEmpty(participant.AddressLine4) ? null : participant.AddressLine4.Substring(0, 35)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "10.Truncate.AddressLine5.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.AddressLine5) OR !(participant.AddressLine5.Length > 35)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "AddressLine5",
                  "value": "string.IsNullOrEmpty(participant.AddressLine5) ? null : participant.AddressLine5.Substring(0, 35)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "13.Truncate.Postcode.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.Postcode) OR !(participant.Postcode.Length > 35)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "Postcode",
                  "value": "string.IsNullOrEmpty(participant.Postcode) ? null : participant.Postcode.Substring(0, 35)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "14.Truncate.TelephoneNumber.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.TelephoneNumber) OR !(participant.TelephoneNumber.Length > 32)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "TelephoneNumber",
                  "value": "string.IsNullOrEmpty(participant.TelephoneNumber) ? null : participant.TelephoneNumber.Substring(0, 32)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "15.Truncate.MobileNumber.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.MobileNumber) OR !(participant.MobileNumber.Length > 32)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "MobileNumber",
                  "value": "string.IsNullOrEmpty(participant.MobileNumber) ? null : participant.MobileNumber.Substring(0, 32)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "16.Truncate.EmailAddress.ExceedsMaximumLength",
        "Expression": "string.IsNullOrEmpty(participant.EmailAddress) OR !(participant.EmailAddress.Length > 90)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "EmailAddress",
                  "value": "string.IsNullOrEmpty(participant.EmailAddress) ? null : participant.EmailAddress.Substring(0, 90)"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "00.Other.Gender.Not-0-1-2-or-9",
        "Expression": "!(participant.Gender != 0 && participant.Gender != 1 && participant.Gender != 2 && participant.Gender != 9)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "field": "Gender",
                  "value": "9",
                  "isExpression": false
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "3.Other.DateOfDeath.DoesNotExist",
        "Expression": "!(participant.ReasonForRemoval == \"DEA\" && string.IsNullOrEmpty(participant.DateOfDeath))",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "field": "DateOfDeath",
                  "value": "participant.ReasonForRemovalEffectiveFromDate",
                  "isExpression": true
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "01.TransformDate.DateOfBirth",
        "Expression": "string.IsNullOrEmpty(participant.DateOfBirth) OR !(participant.DateOfBirth.Length != 8 && (participant.DateOfBirth.Length == 4 || participant.DateOfBirth.Length == 6))",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "DateOfBirth",
                  "value": "(participant.DateOfBirth.Length == 4 ? participant.DateOfBirth + \"01\" + \"01\" : participant.DateOfBirth + \"01\")"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "01.TransformDate.DateOfDeath",
        "Expression": "string.IsNullOrEmpty(participant.DateOfDeath) OR !(participant.DateOfDeath.Length != 8 && (participant.DateOfDeath.Length == 4 || participant.DateOfDeath.Length == 6))",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "DateOfDeath",
                  "value": "(participant.DateOfDeath.Length == 4 ? participant.DateOfDeath + \"01\" + \"01\" : participant.DateOfDeath + \"01\")"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "01.TransformDate.CurrentPostingEffectiveFromDate",
        "Expression": "string.IsNullOrEmpty(participant.CurrentPostingEffectiveFromDate) OR !(participant.CurrentPostingEffectiveFromDate.Length != 8 && (participant.CurrentPostingEffectiveFromDate.Length == 4 || participant.CurrentPostingEffectiveFromDate.Length == 6))",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "CurrentPostingEffectiveFromDate",
                  "value": "(participant.CurrentPostingEffectiveFromDate.Length == 4 ? participant.CurrentPostingEffectiveFromDate + \"01\" + \"01\" : participant.CurrentPostingEffectiveFromDate + \"01\")"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "01.TransformDate.UsualAddressEffectiveFromDate",
        "Expression": "string.IsNullOrEmpty(participant.UsualAddressEffectiveFromDate) OR !(participant.UsualAddressEffectiveFromDate.Length != 8 && (participant.UsualAddressEffectiveFromDate.Length == 4 || participant.UsualAddressEffectiveFromDate.Length == 6))",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "UsualAddressEffectiveFromDate",
                  "value": "(participant.UsualAddressEffectiveFromDate.Length == 4 ? participant.UsualAddressEffectiveFromDate + \"01\" + \"01\" : participant.UsualAddressEffectiveFromDate + \"01\")"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "01.TransformDate.ReasonForRemovalEffectiveFromDate",
        "Expression": "string.IsNullOrEmpty(participant.ReasonForRemovalEffectiveFromDate) OR !(participant.ReasonForRemovalEffectiveFromDate.Length != 8 && (participant.ReasonForRemovalEffectiveFromDate.Length == 4 || participant.ReasonForRemovalEffectiveFromDate.Length == 6))",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "ReasonForRemovalEffectiveFromDate",
                  "value": "(participant.ReasonForRemovalEffectiveFromDate.Length == 4 ? participant.ReasonForRemovalEffectiveFromDate + \"01\" + \"01\" : participant.ReasonForRemovalEffectiveFromDate + \"01\")"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "01.TransformDate.TelephoneNumberEffectiveFromDate",
        "Expression": "string.IsNullOrEmpty(participant.TelephoneNumberEffectiveFromDate) OR !(participant.TelephoneNumberEffectiveFromDate.Length != 8 && (participant.TelephoneNumberEffectiveFromDate.Length == 4 || participant.TelephoneNumberEffectiveFromDate.Length == 6))",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "TelephoneNumberEffectiveFromDate",
                  "value": "(participant.TelephoneNumberEffectiveFromDate.Length == 4 ? participant.TelephoneNumberEffectiveFromDate + \"01\" + \"01\" : participant.TelephoneNumberEffectiveFromDate + \"01\")"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "01.TransformDate.MobileNumberEffectiveFromDate",
        "Expression": "string.IsNullOrEmpty(participant.MobileNumberEffectiveFromDate) OR !(participant.MobileNumberEffectiveFromDate.Length != 8 && (participant.MobileNumberEffectiveFromDate.Length == 4 || participant.MobileNumberEffectiveFromDate.Length == 6))",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "MobileNumberEffectiveFromDate",
                  "value": "(participant.MobileNumberEffectiveFromDate.Length == 4 ? participant.MobileNumberEffectiveFromDate + \"01\" + \"01\" : participant.MobileNumberEffectiveFromDate + \"01\")"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "01.TransformDate.EmailAddressEffectiveFromDate",
        "Expression": "string.IsNullOrEmpty(participant.EmailAddressEffectiveFromDate) OR !(participant.EmailAddressEffectiveFromDate.Length != 8 && (participant.EmailAddressEffectiveFromDate.Length == 4 || participant.EmailAddressEffectiveFromDate.Length == 6))",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "EmailAddressEffectiveFromDate",
                  "value": "(participant.EmailAddressEffectiveFromDate.Length == 4 ? participant.EmailAddressEffectiveFromDate + \"01\" + \"01\" : participant.EmailAddressEffectiveFromDate + \"01\")"
                }
              ]
            }
          }
        }
      },
      {
        "RuleName": "1.ParticipantNotRegisteredToGPWithReasonForRemoval.NonFatal",
        "Expression": "!(participantNotRegisteredToGP AND validPostcode)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "PrimaryCareProviderEffectiveFromDate",
                  "value": "participant.ReasonForRemovalEffectiveFromDate"
                },
                {
                  "isExpression": false,
                  "field": "ReasonForRemovalEffectiveFromDate",
                  "value": null
                },
                {
                  "isExpression": false,
                  "field": "ReasonForRemoval",
                  "value": null
                },
                {
                  "isExpression": true,
                  "field": "PrimaryCareProvider",
                  "value": "\"ZZZ\" + bsoCode"
                }
              ]
            }
          },
          "OnSuccess": {
            "Name": "EvaluateRule",
            "Context": {
              "workflowName": "TransformData",
              "ruleName": "2.ParticipantNotRegisteredToGPWithReasonForRemoval"
            }
          }
        }
      },
      {
        "RuleName": "2.ParticipantNotRegisteredToGPWithReasonForRemoval.NonFatal",
        "Expression": "!(participantNotRegisteredToGP AND !validPostcode AND !string.IsNullOrEmpty(participant.PrimaryCareProvider) AND !dummyPrimaryCareProvider)",
        "Actions": {
          "OnFailure": {
            "Name": "TransformAction",
            "Context": {
              "transformFields": [
                {
                  "isExpression": true,
                  "field": "PrimaryCareProviderEffectiveFromDate",
                  "value": "participant.ReasonForRemovalEffectiveFromDate"
                },
                {
                  "isExpression": false,
                  "field": "ReasonForRemovalEffectiveFromDate",
                  "value": null
                },
                {
                  "isExpression": false,
                  "field": "ReasonForRemoval",
                  "value": null
                },
                {
                  "isExpression": true,
                  "field": "PrimaryCareProvider",
                  "value": "\"ZZZ\" + bsoCode"
                }
              ]
            }
          },
          "OnSuccess": {
            "Name": "EvaluateRule",
            "Context": {
              "workflowName": "TransformData",
              "ruleName": "3.ParticipantNotRegisteredToGPWithReasonForRemoval"
            }
          }
        }
      },
      {
        "RuleName": "3.ParticipantNotRegisteredToGPWithReasonForRemoval.NonFatal",
        "Expression": "!(participantNotRegisteredToGP AND !validPostcode AND dummyPrimaryCareProvider)",
        "ErrorMessage": "ParticipantNotRegisteredToGPWithReasonForRemoval transformation rule failed.",
        "Actions": {
          "OnSuccess": {
            "Name": "EvaluateRule",
            "Context": {
              "workflowName": "TransformData",
              "ruleName": "4.ParticipantNotRegisteredToGPWithReasonForRemoval"
            }
          }
        }
      },
      {
        "RuleName": "4.ParticipantNotRegisteredToGPWithReasonForRemoval.NonFatal",
        "Expression": "!(participantNotRegisteredToGP AND !validPostcode AND string.IsNullOrEmpty(participant.PrimaryCareProvider))",
        "ErrorMessage": "ParticipantNotRegisteredToGPWithReasonForRemoval transformation rule failed."
      }
    ]
  }
]
