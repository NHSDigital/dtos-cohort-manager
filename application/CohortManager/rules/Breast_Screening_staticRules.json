[
  {
    "WorkflowName": "Common",
    "Rules": [
      {
        "RuleName": "9.NhsNumber.Fatal",
        "Expression": "Regex.IsMatch(participant.NhsNumber, \"^\\\\d{10}$\")",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "NHS ID Invalid"
            }
          }
        }
      },
      {
        "RuleName": "57.SupersededByNhsNumber.NonFatal",
        "Expression": "string.IsNullOrEmpty(participant.SupersededByNhsNumber) OR Regex.IsMatch(participant.SupersededByNhsNumber, \"^\\\\d{10}$\")",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Superseded by NHS ID invalid"
            }
          }
        }
      },
      {
        "RuleName": "8.RecordType.NonFatal",
        "Expression": "participant.RecordType == Actions.New OR participant.RecordType == Actions.Amended OR participant.RecordType == Actions.Removed",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Incorrect record type"
            }
          }
        }
      },
      {
        "RuleName": "14.ReasonForRemoval.NonFatal",
        "Expression": "string.IsNullOrEmpty(participant.ReasonForRemoval) OR new string[] {\"AFL\",\"AFN\",\"CGA\",\"DEA\",\"DIS\",\"EMB\",\"LDN\",\"NIT\",\"OPA\",\"ORR\",\"RDI\",\"RDR\",\"RFI\",\"RPR\",\"SCT\",\"SDL\",\"SDN\",\"TRA\"}.Contains(participant.ReasonForRemoval)",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Reason for removal is invalid"
            }
          }
        }
      },
      {
        "RuleName": "30.Postcode.NonFatal",
        "Expression": "Regex.IsMatch(participant.Postcode, \"^([A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2})$\", RegexOptions.IgnoreCase)",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Postcode invalid"
            }
          }
        }
      },
      {
        "RuleName": "71.NewParticipantWithNoAddress.NonFatal",
        "Expression": "!(participant.RecordType == Actions.New AND string.IsNullOrEmpty(participant.AddressLine1) AND string.IsNullOrEmpty(participant.AddressLine2) AND string.IsNullOrEmpty(participant.AddressLine3) AND string.IsNullOrEmpty(participant.AddressLine4) AND string.IsNullOrEmpty(participant.AddressLine5))",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Address is missing"
            }
          }
        }
      },
      {
        "RuleName": "3.PrimaryCareProviderAndReasonForRemoval.NonFatal",
        "Expression": "(string.IsNullOrEmpty(participant.PrimaryCareProvider) AND !string.IsNullOrEmpty(participant.ReasonForRemoval)) OR (!string.IsNullOrEmpty(participant.PrimaryCareProvider) AND string.IsNullOrEmpty(participant.ReasonForRemoval))",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "GP practice code and Reason for Removal fields contain incompatible values"
            }
          }
        }
      },
      {
        "RuleName": "17.DateOfBirth.NonFatal",
        "Expression": "ValidationHelper.ValidatePastDate(participant.DateOfBirth)",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Date of birth invalid"
            }
          }
        }
      },
      {
        "RuleName": "39.FamilyName.NonFatal",
        "Expression": "!(participant.RecordType != Actions.Amended && string.IsNullOrEmpty(participant.FamilyName))",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Family Name value missing"
            }
          }
        }
      },
      {
        "RuleName": "40.FirstName.NonFatal",
        "Expression": "!(participant.RecordType != Actions.Amended && string.IsNullOrEmpty(participant.FirstName))",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "First Name value missing"
            }
          }
        }
      },
      {
        "RuleName": "42.GPPracticeCode.NonFatal",
        "Expression": "participant.RecordType != Actions.New OR !string.IsNullOrEmpty(participant.PrimaryCareProvider)",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "GP practice code invalid"
            }
          }
        }
      },
      {
        "RuleName": "66.DeathStatus.NonFatal",
        "Expression": "participant.RecordType == Actions.Amended OR (participant.DeathStatus.HasValue ? participant.DeathStatus.Value != Status.Formal) OR participant.ReasonForRemoval == \"DEA\"",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "\"Invalid death status\""
            }
          }
        }
      },
      {
        "RuleName": "19.ReasonForRemovalEffectiveFromDate.NonFatal",
        "Expression": "string.IsNullOrEmpty(participant.ReasonForRemovalEffectiveFromDate) OR ValidationHelper.ValidatePastDate(participant.ReasonForRemovalEffectiveFromDate)",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Reason for removal date invalid"
            }
          }
        }
      },
      {
        "RuleName": "100.PrimaryCareProviderEffectiveFromDate.NonFatal",
        "Expression": "string.IsNullOrEmpty(participant.PrimaryCareProviderEffectiveFromDate) OR ValidationHelper.ValidatePastDate(participant.PrimaryCareProviderEffectiveFromDate)"
      },
      {
        "RuleName": "101.CurrentPostingEffectiveFromDate.NonFatal",
        "Expression": "string.IsNullOrEmpty(participant.CurrentPostingEffectiveFromDate) OR ValidationHelper.ValidatePastDate(participant.CurrentPostingEffectiveFromDate)"
      },
      {
        "RuleName": "102.UsualAddressEffectiveFromDate.NonFatal",
        "Expression": "string.IsNullOrEmpty(participant.UsualAddressEffectiveFromDate) OR ValidationHelper.ValidatePastDate(participant.UsualAddressEffectiveFromDate)"
      },
      {
        "RuleName": "103.TelephoneNumberEffectiveFromDate.NonFatal",
        "Expression": "string.IsNullOrEmpty(participant.TelephoneNumberEffectiveFromDate) OR ValidationHelper.ValidatePastDate(participant.TelephoneNumberEffectiveFromDate)"
      },
      {
        "RuleName": "104.MobileNumberEffectiveFromDate.NonFatal",
        "Expression": "string.IsNullOrEmpty(participant.MobileNumberEffectiveFromDate) OR ValidationHelper.ValidatePastDate(participant.MobileNumberEffectiveFromDate)"
      },
      {
        "RuleName": "105.EmailAddressEffectiveFromDate.NonFatal",
        "Expression": "string.IsNullOrEmpty(participant.EmailAddressEffectiveFromDate) OR ValidationHelper.ValidatePastDate(participant.EmailAddressEffectiveFromDate)"
      },
      {
        "RuleName": "18.DateOfDeath.NonFatal",
        "Expression": "string.IsNullOrEmpty(participant.DateOfDeath) OR ValidationHelper.ValidatePastDate(participant.DateOfDeath)",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Date of death invalid"
            }
          }
        }
      },
      {
        "RuleName": "47.NewParticipantWithRemovalOrDeath.NonFatal",
        "Expression": "participant.RecordType != Actions.New OR (string.IsNullOrEmpty(participant.ReasonForRemoval) AND string.IsNullOrEmpty(participant.ReasonForRemovalEffectiveFromDate) AND string.IsNullOrEmpty(participant.DateOfDeath))",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Removal fields incompatible with record type"
            }
          }
        }
      },
      {
        "RuleName": "49.InterpreterCheck.NonFatal",
        "Expression": "int.Parse(participant.IsInterpreterRequired) != 0 OR int.Parse(participant.IsInterpreterRequired) != 1",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Interpreter required does not contain a valid value"
            }
          }
        }
      },
      {
        "RuleName": "61.InvalidFlag.NonFatal",
        "Expression": "participant.InvalidFlag == \"1\" OR participant.InvalidFlag == \"0\"",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "The Invalid Flag received does not contain a valid value"
            }
          }
        }
      },
      {
        "RuleName": "62.ValidateReasonForRemoval.NonFatal",
        "Expression": "!(participant.ReasonForRemoval == \"LDN\" AND  string.IsNullOrEmpty(participant.SupersededByNhsNumber))",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Reason for removal and superseded NHS ID values incompatible"
            }
          }
        }
      },
      {
        "RuleName": "53.CurrentPostingAndPrimaryCareProvider.NonFatal",
        "LocalParams": [
          {
            "Name": "currentPosting",
            "Expression": "participant.CurrentPosting"
          },
          {
            "Name": "primaryCareProvider",
            "Expression": "participant.PrimaryCareProvider"
          }
        ],
        "Expression": "!(string.IsNullOrEmpty(currentPosting) AND !string.IsNullOrEmpty(primaryCareProvider))",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "Current posting and Primary Care provider contain incompatible values"
            }
          }
        }
      },
      {
        "RuleName": "94.EligibilityFlag.NonFatal",
        "LocalParams": [
          {
            "Name": "newRecordType",
            "Expression": "participant.RecordType == Actions.New"
          },
          {
            "Name": "validNewEligibilityFlag",
            "Expression": "participant.EligibilityFlag != \"0\""
          },
          {
            "Name": "delRecordType",
            "Expression": "participant.RecordType == Actions.Removed"
          },
          {
            "Name": "validDelEligibilityFlag",
            "Expression": "participant.EligibilityFlag != \"1\""
          },
          {
            "Name": "amendRecordType",
            "Expression": "participant.RecordType == Actions.Amended"
          },
          {
            "Name": "validAmendEligibilityFlag",
            "Expression": "(participant.EligibilityFlag == \"1\") OR (participant.EligibilityFlag == \"0\")"
          }
        ],
        "Expression": "(newRecordType AND validNewEligibilityFlag) OR (delRecordType AND validDelEligibilityFlag) OR (amendRecordType AND validAmendEligibilityFlag)",
        "Actions": {
          "OnFailure": {
            "Name": "OutputExpression",
            "Context": {
              "Expression": "\"Invalid eligibility flag.\""
            }
          }
        }
      }
    ]
  }
]
