parameters:
  - name: hostPoolName
    type: string
  - name: serviceConnection
    type: string
  - name: targetSubscriptionId
    type: string
  - name: terraformActions
    type: string
  - name: tfVarsFile
    type: string
  - name: environment
    type: string
  - name: resourceGroupNameSql
    type: string
  - name: databaseManagementJobName
    type: string
  - name: dockerImageTag
    type: string
  - name: retagImages
    type: boolean
  - name: retagImagesFrom
    type: string
  - name: retagImagesTo
    type: string
  - name: slackWebHook
    type: string
    default: ''

stages:
- stage: retag_images_stage
  # Only required until commit hashes are passed in by calling pipeline, except for the
  # PreProd pipeline which needs to retag images to move them from the Dev ACR to the Prod ACR
  displayName: ACR re-tag
  pool:
    name: ${{ parameters.hostPoolName }}
  jobs:
    - job: re_tag
      displayName: Re-tag Docker images
      condition: in('${{ parameters.retagImages }}', 'true')
      variables:
        SELECT_IMAGE_TAG: ${{ parameters.retagImagesFrom }}
        ADD_IMAGE_TAG: ${{ parameters.retagImagesTo }}
      steps:
        - template: .azuredevops/templates/steps/acr-import-retag-verbose.yaml@dtos-devops-templates
          parameters:
            serviceConnection: ${{ parameters.serviceConnection }}

    - job: set_stage_status
      displayName: Set Stage Status
      dependsOn:
        - re_tag
      condition: always()
      variables:
        # Capture the results of the preceding jobs as variables
        re_tag_result: $[ dependencies.re_tag.result ]
      steps:
        - bash: |
            status="failed"
            # Access the variables that were set at the job level
            if [[ "$(re_tag_result)" == "Succeeded" || "$(re_tag_result)" == "Skipped" ]]; then
              status="succeeded"
            fi
            echo "The final status of the Retag Image stage is: $status"
            echo "##vso[task.setvariable variable=stage_status;isOutput=true]$status"
          name: set_status
          displayName: Set Stage Status

- stage: terraform_deploy_stage
  ${{ if eq(parameters.terraformActions, 'Apply') }}:
    displayName: Terraform Deploy
  ${{ else }}:
    displayName: Terraform Plan Only
  condition: in(dependencies.retag_images_stage.result, 'Succeeded', 'Skipped')
  variables:
    tfVarsFile: ${{ parameters.tfVarsFile }}
  pool:
    name: ${{ parameters.hostPoolName }}
  jobs:
    - job: init_and_plan
      displayName: Init, plan, store artifact
      steps:
        - checkout: self
        - checkout: dtos-devops-templates
        - template: .azuredevops/templates/steps/tf_plan.yaml@dtos-devops-templates
          parameters:
            tfCommandOptions: '-var="docker_image_tag=${{ parameters.dockerImageTag }}"'

    - deployment: terraform_apply
      displayName: Init, get plan artifact, apply
      environment: ${{ parameters.environment }}
      dependsOn: init_and_plan
      condition: |
        and(
          eq(dependencies.init_and_plan.outputs['TerraformPlan.changesPresent'], 'true'), 
          eq('${{ parameters.terraformActions }}', 'Apply')
        )
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - checkout: dtos-devops-templates
              - template: .azuredevops/templates/steps/tf_apply.yaml@dtos-devops-templates

    - job: set_stage_status
      displayName: Set Stage Status
      dependsOn:
        - init_and_plan
        - terraform_apply
      condition: always()
      variables:
        # Capture the results of the preceding jobs as variables
        init_plan_result: $[ dependencies.init_and_plan.result ]
        terraform_apply_result: $[ dependencies.terraform_apply.result ]
      steps:
        - bash: |
            status="failed"
            # Access the variables that were set at the job level
            if [[ "$(init_plan_result)" == "Succeeded" || "$(init_plan_result)" == "Skipped" ]] && [[ "$(terraform_apply_result)" == "Succeeded" || "$(terraform_apply_result)" == "Skipped" ]]; then
              status="succeeded"
            fi
            echo "The final status of the Terraform Deploy stage is: $status"
            echo "##vso[task.setvariable variable=stage_status;isOutput=true]$status"
          name: set_status
          displayName: Set Stage Status
              
- stage: db_changes_stage
  displayName: Database changes
  dependsOn: terraform_deploy_stage
  condition: in(dependencies.terraform_deploy_stage.result, 'Succeeded', 'Skipped')
  pool:
    name: ${{ parameters.hostPoolName }}
  jobs:
    - job: db_changes
      displayName: Apply database changes
      steps:
        - checkout: self
        - checkout: dtos-devops-templates
        - template: .azuredevops/templates/steps/app-container-job-start.yaml@dtos-devops-templates
          parameters:
            serviceConnection: ${{ parameters.serviceConnection }}
            targetSubscriptionId: ${{ parameters.targetSubscriptionId }}
            resourceGroupName: ${{ parameters.resourceGroupNameSql }}
            jobName: ${{ parameters.databaseManagementJobName }}

    - job: set_stage_status
      displayName: Set Stage Status
      dependsOn:
        - db_changes
      condition: always()
      variables:
        # Capture the results of the preceding jobs as variables
        db_changes_result: $[ dependencies.db_changes.result ]
      steps:
        - bash: |
            status="failed"
            # Access the variables that were set at the job level
            if [[ "$(db_changes_result)" == "Succeeded" || "$(db_changes_result)" == "Skipped" ]]; then
              status="succeeded"
            fi
            echo "The final status of the DB Changes stage is: $status"
            echo "##vso[task.setvariable variable=stage_status;isOutput=true]$status"
          name: set_status
          displayName: Set Stage Status

- stage: restart_functions_stage
  displayName: Restart Function Apps
  dependsOn:
  - terraform_deploy_stage
  - db_changes_stage
  condition: |
    or(
      in(dependencies.terraform_deploy_stage.result, 'Succeeded', 'Skipped'),
      in(dependencies.db_changes_stage.result, 'Succeeded', 'Skipped')
    )
  pool:
    name: ${{ parameters.hostPoolName }}
  jobs:
    - job: restart_functions
      displayName: Restart Function Apps to load new images
      steps:
        - template: .azuredevops/templates/steps/app-services-restart.yaml@dtos-devops-templates
          parameters:
            serviceConnection: ${{ parameters.serviceConnection }}

    - job: set_stage_status
      displayName: Set Stage Status
      dependsOn:
        - restart_functions
      condition: always()
      variables:
        # Capture the results of the preceding jobs as variables
        restart_functions_result: $[ dependencies.restart_functions.result ]
      steps:
        - bash: |
            status="failed"
            # Access the variables that were set at the job level
            if [[ "$(restart_functions_result)" == "Succeeded" || "$(restart_functions_result)" == "Skipped" ]]; then
              status="succeeded"
            fi
            echo "The final status of the Restart Functions stage is: $status"
            echo "##vso[task.setvariable variable=stage_status;isOutput=true]$status"
          name: set_status
          displayName: Set Stage Status

- stage: notify_stage
  displayName: Send Slack Notification
  dependsOn:
    - retag_images_stage
    - terraform_deploy_stage
    - db_changes_stage
    - restart_functions_stage
  condition: |
    and(
      always(),
      ne('${{ parameters.slackWebHook }}', '')
    )
  pool:
    name: ${{ parameters.hostPoolName }}
  variables:
    retag_images_status: $[ stageDependencies.retag_images_stage.set_stage_status.outputs['set_status.stage_status'] ]
    terraform_deploy_status: $[ stageDependencies.terraform_deploy_stage.set_stage_status.outputs['set_status.stage_status'] ]
    db_changes_status: $[ stageDependencies.db_changes_stage.set_stage_status.outputs['set_status.stage_status'] ]
    restart_functions_status: $[ stageDependencies.restart_functions_stage.set_stage_status.outputs['set_status.stage_status'] ]
  jobs:
    - job: set_status_job
      displayName: Set Status Output
      steps:
        - bash: |
            declare -A stage_statuses=(
              ["Retag Images"]="$(retag_images_status)"
              ["Terraform Deploy"]="$(terraform_deploy_status)"
              ["DB Changes"]="$(db_changes_status)"
              ["Restart Functions"]="$(restart_functions_status)"
            )

            failed_stages=""
            skipped_stages=""
            for stage in "${!stage_statuses[@]}"; do
              status="${stage_statuses[$stage]}"
              echo "$stage status: $status"
              if [ "$status" == "" ]; then
                if [ -n "$skipped_stages" ]; then
                  skipped_stages="$skipped_stages, $stage"
                else
                  skipped_stages="$stage"
                fi
              elif [ "$status" != "succeeded" ]; then
                if [ -n "$failed_stages" ]; then
                  failed_stages="$failed_stages, $stage"
                else
                  failed_stages="$stage"
                fi
              fi
            done

            if [ -z "$failed_stages" ]; then
              echo "##vso[task.setvariable variable=status;isOutput=true]succeeded"
            else
              echo "##vso[task.setvariable variable=status;isOutput=true]failed"
              echo "##vso[task.setvariable variable=failedStages;isOutput=true]$failed_stages"
            fi
            if [ -n "$skipped_stages" ]; then
              echo "##vso[task.setvariable variable=skippedStages;isOutput=true]$skipped_stages"
            else
              echo "##vso[task.setvariable variable=skippedStages;isOutput=true]None"
            fi
          name: set_status
          displayName: Set Slack Message Status

    - job: send_message_job
      displayName: Send Slack Message
      dependsOn: set_status_job
      variables:
        final_status: $[ dependencies.set_status_job.outputs['set_status.status'] ]
        failed_stages: $[ dependencies.set_status_job.outputs['set_status.failedStages'] ]
        skipped_stages: $[ dependencies.set_status_job.outputs['set_status.skippedStages'] ]
        slackSuccessMessage: |
          *✅ Infrastructure Deployment Complete*

          *Environment:* _${{ parameters.environment }}_
          *Requested By:* $(Build.RequestedFor)
          *Branch:* $(Build.SourceBranchName)
          *Docker Image Tag:* ${{ parameters.dockerImageTag }}

          *Skipped Stage(s):* $(skipped_stages)

          • *<$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)|View ADO Pipeline Run $(Build.BuildId) here>*
          • *<https://github.com/Digital/manager/actions?query=branch%3Amain|Approve GitHub Actions to promote to next environment here>*

          *📊 Note:* End-to-end tests may still be running. Please check the <#C08U1DTP6CQ|manager-tests> Slack channel for completed test results.
        slackFailureMessage: |
          *❌ Infrastructure Deployment _Failed_*

          *Environment:* _${{ parameters.environment }}_
          *Requested By:* $(Build.RequestedFor)
          *Branch:* $(Build.SourceBranchName)
          *Docker Image Tag:* ${{ parameters.dockerImageTag }}

          *Failed Stage(s):* $(failed_stages)
          *Skipped Stage(s):* $(skipped_stages)

          • *<$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)|View ADO Pipeline Run $(Build.BuildId) here>*
      steps:
        - checkout: dtos-devops-templates
          sparseCheckoutDirectories: scripts
          path: templates
          displayName: 'Checkout Templates Repo'

        - task: PythonScript@0
          displayName: 'Send Slack Success Notification'
          condition: eq(variables.final_status, 'succeeded')
          inputs:
            scriptSource: 'filePath'
            scriptPath: '$(Pipeline.Workspace)/templates/scripts/integrations/slack/SlackIntegrator.py'
            arguments: >
              --webhook "${{ parameters.slackWebHook }}"
              --markdown "$(slackSuccessMessage)"

        - task: PythonScript@0
          displayName: 'Send Slack Failure Notification'
          condition: eq(variables.final_status, 'failed')
          inputs:
            scriptSource: 'filePath'
            scriptPath: '$(Pipeline.Workspace)/templates/scripts/integrations/slack/SlackIntegrator.py'
            arguments: >
              --webhook "${{ parameters.slackWebHook }}"
              --markdown "$(slackFailureMessage)"
