# Things to change for further environments:
# - stage variable group name: dtos_ENVIRONMENT_variables
# -

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - Infrastructure/*

variables:
  # - group: global_variable_group
  - group: int_variable_group
  - name: acr_hub_dev_name
    value: acrukshubdev
  - name: acr_hub_dev_rg
    value: rg-hub-dev-uks-hub
  - name: int_rg
    value: rg-cohman-int-uks

pool:
  #vmImage: ubuntu-latest
  name: 'private-pool-dev-uks'

# integration environment

jobs:
  - job: RestartFunction
    displayName: Update Function App
    # dependsOn:
    #   - waitForValidation
    # variables:
    #   functionAppName: $[ dependencies.GetTriggeringAlias.outputs['GetTriggeringAlias.functionAppName'] ]
    steps:
    - task: AzureCLI@2
      name: UpdateFunctionApp
      displayName: Update Function App
      inputs:
        azureSubscription: $(SERVICE_CONNECTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az upgrade
          export PYTHONWARNINGS="ignore::CryptographyDeprecationWarning"

          az group list --output table
          pip install --upgrade paramiko cryptography

          az account set --subscription $(SUBSCRIPTION_ID)

          echo SERVICE_CONNECTION: $(SERVICE_CONNECTION)

          for files in $(cat scripts/config/int-environment-function-list.txt); do
            echo $files
            functionAppName=$files


            echo "Restarting Function App: $functionAppName"
            az functionapp restart --name $functionAppName --resource-group $(int_rg)

            az functionapp show --name $functionAppName  --resource-group $(int_rg) --query "state"
          done

# steps:
# # Step 1: Get the AAD token from Managed Identity
# - script: |
#     if [[ -z "$token" ]]; then
#       echo "Failed to acquire AAD token"
#       exit 1
#     fi
#     echo "the token: $token "
#     echo "##vso[task.setvariable variable=AccessToken]$token"
#     echo "##vso[task.setvariable variable=FunctionAppName]int-uks-create-participant"

#   displayName: 'Get AAD Token Using Managed Identity'

# # Step 2: Call Kudu API to get Docker image info
# - script: |
#     response=$(curl -s -H "Authorization: Bearer $(AccessToken)" \
#       "https://$(FunctionAppName).scm.azurewebsites.net/api/containers/info")

#     echo "Response from Kudu API: $response"

#     # Extract image name and digest from the response
#     image=$(echo "$response" | jq -r '.Image')
#     digest=$(echo "$image" | awk -F'@' '{print $2}')

#     if [[ -z "$digest" ]]; then
#       echo "No digest found in the deployed image."
#       exit 1
#     else
#       echo "##vso[task.setvariable variable=Digest]$digest"
#       echo "Docker Image Digest: $digest"
#     fi
#   displayName: 'Get Docker Image Digest from Kudu with Managed Identity'

# # Step 3: Output the digest (for demonstration purposes)
# - script: |
#     echo "The Docker Image Digest used by the Function App is: $(Digest)"
#   displayName: 'Output Docker Image Digest'


# jobs:
#   - job: SendSlackAlert
#     displayName: get function App SHA code
#     variables:
#       functionAppName: $[ dependencies.GetTriggeringAlias.outputs['GetTriggeringAlias.functionAppName'] ]
#     steps:
#     - checkout: self
#     - task: AzureCLI@2
#       name: SendSlackAlert
#       displayName: Send Slack Alert
#       inputs:
#         azureSubscription: sc-cohort-manager-dev
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript'
#         inlineScript: |
#           echo "the function name is: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
#           pip install python-hcl2
#           set -x
#           chmod 755 scripts/azure/GetImageTagsByManifest.sh
#           digest=$(scripts/azure/GetImageDigestByTag.sh -g $(acr_hub_dev_rg) -s $(ACR_DEV_HUB_SUBSCRIPTION_ID) -c $(acr_hub_dev_name) -f $(functionAppName) )
#           echo digest: "${digest}"
#           export SLACK_WEBHOOK_URL=$(SLACK_WEBHOOK_URL)
#           python3 scripts/azure/SlackWebhookController.py -v -f $(functionAppName) -c "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)" -t "${list_image_tags}"

#   - job: waitForValidation
#     displayName: Wait for external validation
#     variables:
#       functionAppName: $[ dependencies.GetTriggeringAlias.outputs['GetTriggeringAlias.functionAppName'] ]
#     pool: server
#     timeoutInMinutes: 1440 # task times out in 1 day
#     steps:
#       - task: ManualValidation@0
#         timeoutInMinutes: 1440 # task times out in 1 day
#         inputs:
#           notifyUsers: |
#             richard.kingston2@nhs.net
#             alastair.lock1@nhs.net
#           instructions: "Please validate the build configuration for: $(functionAppName)"
#           onTimeout: "resume"

  # - job: UpdateFunctionApp
  #   displayName: Update Function App
  #   dependsOn:
  #     - waitForValidation
  #   variables:
  #     functionAppName: $[ dependencies.GetTriggeringAlias.outputs['GetTriggeringAlias.functionAppName'] ]
  #   steps:
  #   - task: AzureCLI@2
  #     name: UpdateFunctionApp
  #     displayName: Update Function App
  #     inputs:
  #       azureSubscription: sc-cohort-manager-dev
  #       scriptType: 'bash'
  #       scriptLocation: 'inlineScript'
  #       inlineScript: |
  #         echo "Restarting Function App: $(functionAppName)"
  #         az functionapp restart --name $(functionAppName) --resource-group $(acr_dev_rg)

  #         pip install python-hcl2
  #         export SLACK_WEBHOOK_URL=$(SLACK_WEBHOOK_URL)
  #         chmod 755 scripts/azure/GetImageTagsByManifest.sh
  #         list_image_tags=$(scripts/azure/GetImageTagsByManifest.sh -g $(acr_dev_rg) -s $(ACR_DEV_SUBSCRIPTION_ID) -c $(acr_dev_name) -f $(functionAppName) )
  #         python3 scripts/azure/SlackWebhookController.py -v -f $(functionAppName) -t "${list_image_tags}"
