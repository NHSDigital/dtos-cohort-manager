---

name: $(Build.SourceBranchName)-$(Date:yyyyMMdd)_$(Rev:r)
trigger: none
pr: none

pool:
  #vmImage: ubuntu-latest
  name: private-pool-dev-uks

resources:
  repositories:
    - repository: dtos-devops-templates
      type: github
      name: NHSDigital/dtos-devops-templates
      ref: d6d6e3e99459d9d71a83fa5affa900a6c339a3b5
      endpoint: NHSDigital

parameters:
  - name: pipelineAction
    displayName: 'Pipeline Action'
    type: string
    values:
      - 'PlanOnly'
      - 'Apply'
      - 'Destroy'
    default: 'Apply'

parameters:
  - name: dockerImageTag
    displayName: 'Docker Image Tag'
    type: string
    default: development

variables:
  - group: SBX_core_backend
  - group: SBX_audit_backend_remote_state
  - group: DEV_hub_backend_remote_state
  - name: TF_VERSION
    value: 1.11.4
  - name: TF_PLAN_ARTIFACT
    value: tf_plan_core_SANDBOX
  - name: TF_DIRECTORY
    value: $(System.DefaultWorkingDirectory)/$(System.TeamProject)/infrastructure/tf-core
  - name: ENVIRONMENT
    value: sandbox

stages:
  - stage: terraform_plan
    displayName: Infrastructure (Plan)
    condition: and(in('${{ parameters.pipelineAction }}', 'Apply', 'PlanOnly'), eq(variables['Build.Reason'], 'Manual'))
    variables:
      tfVarsFile: environments/$(ENVIRONMENT).tfvars
    jobs:
      - job: init_and_plan
        displayName: Init, plan, store artifact
        steps:
          - checkout: self
          - checkout: dtos-devops-templates
          - template: .azuredevops/templates/steps/tf_plan.yaml@dtos-devops-templates
            parameters:
              tfCommandOptions: '-var="docker_image_tag=${{ parameters.dockerImageTag }}"'

  - stage: terraform_apply
    displayName: Infrastructure (Apply)
    dependsOn: [terraform_plan]
    condition: and(
      eq('${{ parameters.pipelineAction }}', 'Apply'),
      eq(variables['Build.Reason'], 'Manual'))
    jobs:
      - deployment: terraform_apply_plan
        displayName: Apply Infrastructure Plan
        environment: $(ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: dtos-devops-templates
                - template: .azuredevops/templates/steps/tf_apply.yaml@dtos-devops-templates

  - stage: terraform_destroy
    displayName: Infrastructure (Remove)
    condition: and(eq('${{ parameters.pipelineAction }}', 'Destroy'), eq(variables['Build.Reason'], 'Manual'))
    variables:
      tfVarsFile: environments/$(ENVIRONMENT).tfvars
    jobs:
      - deployment: terraform_destroy
        displayName: Terraform Destroy
        environment: $(ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: dtos-devops-templates
                - template: .azuredevops/templates/steps/tf_destroy.yaml@dtos-devops-templates

                # - task: AzureCLI@2
                #   displayName: Clean-up Backend
                #   inputs:
                #     azureSubscription: $(SERVICE_CONNECTION)
                #     scriptLocation: inlineScript
                #     scriptType: bash
                #     workingDirectory: $(tfExecutionDir)
                #     inlineScript: |
                #       # Check if the backend configuration file exists and if it does, delete it:
                #       container_exists=$(az storage container exists --name $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) --account-name $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME) --auth-mode login --output tsv)
                #       if [ "$container_exists" == "True" ]; then
                #         echo "##[debug] Container $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) exists, deleting it..."
                #         az storage container delete --name $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) --account-name $(BACKEND_AZURE_STORAGE_ACCOUNT_NAME) --auth-mode login
                #       else
                #         echo "##[debug] Container $(BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME) does not exist."
                #       fi
