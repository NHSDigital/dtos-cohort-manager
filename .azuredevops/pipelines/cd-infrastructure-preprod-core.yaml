---

name: $(Build.SourceBranchName)-$(Date:yyyyMMdd)_$(Rev:r)
trigger: none
pr: none

pool:
  name: private-pool-prod-uks

resources:
  repositories:
    - repository: dtos-devops-templates
      type: github
      name: NHSDigital/dtos-devops-templates
      ref: feat/dtoss-9902-end-to-end-pipeline
      endpoint: NHSDigital

parameters:
  - name: dockerImageTag
    displayName: 'Docker Image Tag'
    type: string
    default: preprod

  - name: retagImages
    displayName: 'Re-tag Images'
    type: boolean
    default: true

variables:
  - group: PRE_core_backend
  - group: PRE_audit_backend_remote_state
  - group: PRE_image_pipelines
  - group: PRD_hub_backend_remote_state
  - name: TF_VERSION
    value: 1.11.4
  - name: TF_PLAN_ARTIFACT
    value: tf_plan_core_PRE
  - name: TF_DIRECTORY
    value: $(System.DefaultWorkingDirectory)/$(System.TeamProject)/infrastructure/tf-core
  - name: ENVIRONMENT
    value: preprod

stages:
  - stage: re_tag_stage
    displayName: ACR re-tag
    condition: and(eq(variables['Build.Reason'], 'Manual'), in('${{ parameters.retagImages }}', 'true'))
    jobs:
    - job: re_tag
      displayName: Re-tag Docker images
      variables:
        # Use this to migrate the images from DEV ACR to PROD ACR
        # SELECT_IMAGE_TAG: ${{ parameters.dockerImageTag }}
        # ADD_IMAGE_TAG: ${{ parameters.dockerImageTag }}
        SELECT_IMAGE_TAG: integration
        ADD_IMAGE_TAG: preprod
      steps:
        - template: .azuredevops/templates/steps/acr-import-retag-no-additional-tags.yaml@dtos-devops-templates
          parameters:
            serviceConnection: $(SERVICE_CONNECTION)

  - stage: terraform_deploy
    displayName: Terraform Deploy
    condition: eq(variables['Build.Reason'], 'Manual')
    variables:
      tfVarsFile: environments/$(ENVIRONMENT).tfvars
    jobs:
      - job: init_and_plan
        displayName: Init, plan, store artifact
        steps:
          - checkout: self
          - checkout: dtos-devops-templates
          - template: .azuredevops/templates/steps/tf_plan.yaml@dtos-devops-templates
            parameters:
              tfCommandOptions: '-var="docker_image_tag=${{ parameters.dockerImageTag }}"'

      - deployment: terraform_apply
        displayName: Init, get plan artifact, apply
        environment: $(ENVIRONMENT)
        dependsOn: init_and_plan
        condition: eq(dependencies.init_and_plan.outputs['TerraformPlan.changesPresent'], 'true')
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: dtos-devops-templates
                - template: .azuredevops/templates/steps/tf_apply.yaml@dtos-devops-templates

  - stage: db_changes_stage
    displayName: Database changes
    jobs:
    - job: db_changes
      pool:
        name: private-pool-dev-uks
      displayName: Apply database changes
      steps:
        - checkout: self
        - checkout: dtos-devops-templates
        - template: .azuredevops/templates/steps/app-container-job-start.yaml@dtos-devops-templates
          parameters:
            serviceConnection: $(SERVICE_CONNECTION)
            targetSubscriptionId: $(TF_VAR_TARGET_SUBSCRIPTION_ID)
            resourceGroupName: $(RESOURCE_GROUP_NAME_SQL)
            jobName: $(DATABASE_MANAGEMENT_JOB_NAME)

  - stage: restart_functions_stage
    displayName: Restart Function Apps
    jobs:
    - job: restart_functions
      pool:
        name: private-pool-dev-uks
      displayName: Restart Function Apps so they pick up new images
      steps:
        - template: .azuredevops/templates/steps/function-apps-restart.yaml@dtos-devops-templates
          parameters:
            serviceConnection: $(SERVICE_CONNECTION)
